module Control.Monad.State

import Data.Tuple (fst, snd, first)
import Data.Functor (Functor(..), map)
import Data.Applicative (Applicative(..))
import Data.Monad (Monad(..))

type State s a = State { runState : s -> (a, s) }

runState : State s a -> s -> (a, s)
runState = (State st) s -> st.runState s

mapState : (a -> b) -> State s a -> State s b
mapState = f (State st) -> State { runState = s -> first f (st.runState s) }

functorState : Functor (State s)
functorState = Functor { map = mapState }

pureState : a -> State s a
pureState = x -> State { runState = \s -> (x, s) }

apState : State s (a -> b) -> State s a -> State a b
apState = (State sf) (State sa) -> State { runState = s -> let sf1 = sf.runState s
                                                               sa1 = sa.runState (snd sf1)
                                                            in ((fst sf1) (fst sa1), snd sa1) }

applicativeState : Applicative (State s)
applicativeState = Applicative { functor = functorState, pure = pureState, ap = apState }

bindState : State s a -> (a -> State s b) -> State s b
bindState = (State sa) asb -> State { runState = s -> let sa1 = sa.runState s
                                                          sb  = asb (fst sa1)
                                                       in runState sb (snd sa1) }

monadState : Monad (State s)
monadState = Monad { applicative = applicativeState, bind = bindState }
