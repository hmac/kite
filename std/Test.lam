module Test

import Data.Bool (Bool(..), all)
import Data.Maybe (Maybe(..))
import Data.Either (Either(..))
import Lam.Show (Show(..))
import Data.Monoid (Monoid(..), concat)
import Lam.String (monoidString)
import Data.List (subsequences, functorList, mapList)
import Data.Functor (Functor, map)

e : Either Bool String
e = Left True

type Foo a = Foo { unFoo : a, tag : Int }

foo : Foo String
foo = Foo { unFoo = "isfoo", tag = 1 }

one : Int
one = case foo of
        Foo f -> f.tag

isfoo : String
isfoo = case foo of
          Foo f -> f.unFoo

inc : Int -> Int
inc i = i + 1

mapTest : [Int]
mapTest = map functorList inc [1,2,3]

main : [Int]
main = mapTest
