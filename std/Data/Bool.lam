module Data.Bool

import Lam.Bool (not)

import Data.Semigroup (Semigroup(..))
import Data.Eq (Eq(..))
import Data.Ord (Ord(..), Ordering(..))

and : Bool -> Bool -> Bool
and = False _ -> False
      True  b -> b

or : Bool -> Bool -> Bool
or = True  _ -> True
     False b -> b

xor : Bool -> Bool -> Bool
xor = True False -> True
      False True -> True
      _     _    -> False

xnor : Bool -> Bool -> Bool
xnor = x y -> not (xor x y)

all : [Bool] -> Bool
all = [] -> True
      (True :: bs) -> all bs
      (False :: _) -> False

-- This is the All semigroup
semigroupBool : Semigroup Bool
semigroupBool = Semigroup { append = appendBool }

appendBool : Bool -> Bool -> Bool
appendBool = and

eqBool : Eq Bool
eqBool = Eq { eq = xnor }

compareBool : Bool -> Bool -> Ordering
compareBool =
  True False -> GT
  False True -> LT
  _     _    -> EQ

ordBool : Ord Bool
ordBool = Ord { eq = eqBool, compare = compareBool }
