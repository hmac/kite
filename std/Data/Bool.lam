module Data.Bool

import Data.Semigroup (Semigroup(..))

type Bool = True | False

and : Bool -> Bool -> Bool
and False _ = False
and True b = b

or : Bool -> Bool -> Bool
or True _ = True
or False b = b

not : Bool -> Bool
not False = True
not True = False

all : [Bool] -> Bool
all [] = True
all (True :: bs) = all bs
all (False :: _) = False

-- This is the All semigroup
semigroupBool : Semigroup Bool
semigroupBool = Semigroup { append = appendBool }

appendBool : Bool -> Bool -> Bool
appendBool False _ = False
appendBool True b = b
