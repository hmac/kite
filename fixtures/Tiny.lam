module Tiny

import Data.Maybe
import Data.Bool

bindMaybe : Maybe a -> (a -> Maybe b) -> Maybe b
bindMaybe Nothing _ = Nothing
bindMaybe (Just x) f = f x

head : [a] -> Maybe a
head [] = Nothing
head (x :: _) = Just x

length : [a] -> Int
length [] = 0
length (x :: xs) = 1 + (length xs)

-- The pattern matching compiler can't (yet) handle constants in patterns
-- fac : Int -> Int
-- fac 0 = 1
-- fac n = n * (n - 1)
fac : Int -> Int
fac n = case n of
          0 -> 1
          n -> n * (fac (n - 1))

main : Int
main = fac 30
