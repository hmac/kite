---
owner: hmac
tag: fixture
---
module Simple (fun1, fun2)


import Data.Maybe (fromMaybe, f, g, h, i)
import qualified Text.Megaparsec.Char.Lexer as L


data AVeryLongType = AVeryLongType



someTuple : (AVeryLongType, AVeryLongType, AVeryLongType, AVeryLongType, AVeryLongType, AVeryLongType, AVeryLongType)

-- some comments

data Maybe a = Nothing
             | Just a

data Pair a b = MkPair a b

data Hand = Left | Right

-- class Functor f where
--   map : (a -> b) -> f a -> f b
-- 
-- instance Functor Maybe where
--   map _ Nothing = Nothing
--   map f (Just x) = Just (f x)

-- A function comment
head : [a] -> a
head [] = error "head: empty list"
head (x :: xs) = x

const : a -> b -> a
const x y = x

flip : (a -> b -> c) -> b -> a -> c
flip f y x = f x y

fromMaybe : a -> Maybe a -> a
fromMaybe def m = case m of
  Just x -> x
  Nothing -> def

three : Int
three = let one = 1
            two = one + one
         in one + two

map : (a -> b) -> [a] -> [b]
map _ [] = []
map f (x :: xs) = (f x) :: (map f xs)

filter : (a -> Bool) -> [a] -> [a]
filter _ [] = []
filter p (x :: xs) = case p x of
                        True -> x :: (filter p xs)
                        False -> filter p xs

-- Anonymous functions and infix operators
-- Pretty-printing of infix operators is currently a bit conservative
incList : [Int] -> [Int]
incList xs = map (\x -> x + 1) (filter (\x -> x < 10) xs)

-- String interpolation
greet : String -> String
greet name = "hi, #{name}!"

main : String
main = greet "Harry"
