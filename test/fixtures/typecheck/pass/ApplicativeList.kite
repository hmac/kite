module ApplicativeList

type Functor f {
  Functor [ map : forall a b. (a -> b) -> f a -> f b ]
}

type Applicative f {
  Applicative [ functor : Functor f, pure : forall a. a -> f a, ap : forall a b. f (a -> b) -> f a -> f b ]
}

functorList : Functor [] { Functor [map: mapList] }

mapList : (a -> b) -> [a] -> [b] {
  match {
    _, []      -> [],
    f, x :: xs -> (f x) :: mapList f xs
  }
}

pureList : a -> [a] { match { x -> [x] } }

applicativeList : Applicative [] { Applicative [functor: functorList, pure: pureList, ap: apList] }

apList : [a -> b] -> [a] -> [b] {
  match {
    [], xs -> [],
    f :: fs, xs -> listAppend (mapList f xs) (apList fs xs)
  }
}

listAppend : [a] -> [a] -> [a] {
match {
  [], ys -> ys,
  x :: xs, ys -> x :: listAppend xs ys
  }
}
