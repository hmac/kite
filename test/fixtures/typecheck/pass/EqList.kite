module EqList

type Eq b { Eq [ eq : b -> b -> Bool ] }

eq : Eq a -> a -> a -> Bool { match { Eq d -> d.eq } }

concat : [Bool] -> Bool { match { _ -> True } }

and : Bool -> Bool -> Bool { match {
  False, _ -> False,
  True, b -> b
} }

zipWith : (a -> b -> c) -> [a] -> [b] -> [c] {
  match {
    _, [], _  -> [],
    _, _,  [] -> [],
    f, x::xs, y::ys -> (f x y) :: zipWith f xs ys
  }
}

eqList : (a -> a -> Bool) -> Eq [a] {
  match {
    eqa -> Eq [ eq: match { xs, ys -> concat (zipWith eqa xs ys) } ]
  }
}
