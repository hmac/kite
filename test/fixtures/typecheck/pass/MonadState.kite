module MonadState

fst : (a, b) -> a { match { (x, _) -> x } }

snd : (a, b) -> b { match { (_, y) -> y } }

type State s a { State [ runState : s -> (a, s) ] }

runState : State s a -> s -> (a, s) { match {
State st, s -> st.runState s
}}

apState : State s (a -> b) -> State s a -> State s b {
  match {
    State sf, State sa -> State [
      runState: match {
        s -> let sf1 = sf.runState s,
                 sa1 = sa.runState (snd sf1)
               { ((fst sf1) (fst sa1), snd sa1) }
      }
    ]
  }
}

gets : (s -> t) -> State s t { match { f -> State [  runState: match { s -> (f s, s) }  ] } }

get : State s s { gets match { s -> s } }
