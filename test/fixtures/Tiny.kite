module Tiny

import Data.Maybe (Maybe, Just, Nothing)
import Data.Bool (Bool, True, False, not)

length : [a] -> Int
length [] = 0
length (x :: xs) = 1 + (length xs)

concat : Monoid a => [a] -> a
concat [] = empty
concat (x :: xs) = append x (concat xs)

-- The pattern matching compiler can't (yet) handle constants in patterns
-- fac : Int -> Int
-- fac 0 = 1
-- fac n = n * (n - 1)
fac : Int -> Int
fac n = case n of
          0 -> 1
          n -> n * (fac (n - 1))

main : Bool
main = not True
