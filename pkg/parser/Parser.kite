module Text.Parser

from std import Data.String (chars, fromChars, consChar, unconsChar)
from std import Data.Char (eqChar, showChar)
from std import Data.Functor (Functor(Functor), map)
from std import Data.Function (compose, const)
from std import Data.Tuple (first, uncurry, fst)
from std import Data.List (head, functorList, monoidList, semigroupList, showList)
from std import Control.Applicative (Applicative(Applicative), ap, pure)
from std import Data.Monad (Monad(..), sequence, bind)
from std import Data.Monoid (concat)
from std import Data.Semigroup (append)
from std import Data.Eq (eq)
from std import Data.Bool (or, monoidAny)
from std import Data.Maybe (Maybe(..), functorMaybe, applicativeMaybe, applicativeMaybe, showMaybe)
from std import Control.Monad.State (State(..), runState, monadState, functorState, applicativeState, gets, put)
from std import Control.Alternative (Alternative, zero, plus, many)
from std import Lazy (Lazy(Lazy), force, lazyFunction)
from std import IO (putLine)
from std import Data.Show (show)

type Parser a = P (State String (Maybe a))

unP : Parser a -> State String (Maybe a)
unP = (P st) -> st

run : Parser a -> String -> Maybe a
run = (P st) -> compose fst (runState st)

mapParser : (a -> b) -> Parser a -> Parser b
mapParser = f (P s) -> P (map functorState (map functorMaybe f) s)

functor : Functor Parser
functor = Functor { map = mapParser }

pureParser : a -> Parser a
pureParser = x -> P (pure applicativeState (Just x))

apParser : Parser (a -> b) -> Parser a -> Parser b
apParser = (P f) (P a) -> P (ap applicativeState (map functorState (ap applicativeMaybe) f) a)

applicative : Applicative Parser
applicative = Applicative { functor = functor, pure = pureParser, ap = apParser }

plusParser : Parser a -> Parser a -> Parser a
plusParser = (P p) (P q) -> P (State { runState = plusHelper p q })

-- This is written awkwardly because the parser doesn't seem to like
-- case expressions with tuple patterns.
plusHelper : State String (Maybe a) -> State String (Maybe a) -> String -> (Maybe a, String)
plusHelper = s1 s2 s -> case runState s1 s of
                           s1res -> case fst s1res of
                                      Nothing -> runState s2 s
                                      Just _ -> s1res

zeroParser : Parser a
zeroParser = P (pure applicativeState Nothing)

alternative : Alternative Parser
alternative = Alternative { applicative = applicative, zero = zeroParser, plus = plusParser }

bindHelper : State String (Maybe a) -> (a -> State String (Maybe b)) -> State String (Maybe b)
bindHelper = sa asb -> bind monadState sa (ma -> case ma of
                                                   Just a -> asb a
                                                   Nothing -> pure applicativeState Nothing)

bindParser : Parser a -> (a -> Parser b) -> Parser b
bindParser = (P p) f -> P (bindHelper p (compose unP f))

monad : Monad Parser
monad = Monad { applicative = applicative, bind = bindParser }

forceParser : (() -> Parser a) -> Parser a
forceParser = f -> f ()

lazyParser : Lazy (Parser a)
lazyParser = Lazy { force = forceParser }

result : a -> Parser a
result = pure applicative

fail : Parser a
fail = zeroParser

itemHelper : (Char, String) -> Parser Char
itemHelper = (c, s) -> sequence monad (P (map functorState (pure applicativeMaybe) (put s))) (pure applicative c)

item : Parser Char
item = bind monad (P (gets unconsChar)) itemHelper

sat : (Char -> Bool) -> Parser Char
sat = p -> bind monad item (x -> case p x of
                                   True -> result x
                                   False -> zero alternative)

char : Char -> Parser Char
char = x -> sat (y -> eq eqChar x y)

oneOfLit : [Char] -> Parser Char
oneOfLit = cs -> sat (x -> concat monoidAny (map functorList (eq eqChar x) cs))

digit : Parser Char
digit = oneOfLit ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']

lower : Parser Char
lower = oneOfLit ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
                  'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

upper : Parser Char
upper = oneOfLit ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

letter : Parser Char
letter = plus alternative lower upper

alphanum : Parser Char
alphanum = plus alternative letter digit

nonEmptyWord : Parser String
nonEmptyWord = bind monad letter (x -> bind monad word (w -> result (consChar x w)))

word : Parser String
word = plus alternative nonEmptyWord (result "")

string : String -> Parser String
string = str -> case unconsChar str of
                  Nothing -> result ""
                  Just (c, s) -> sequence monad (char c) (sequence monad (string s) (result str))

main : IO ()
main = let result : Maybe Char
           result = run lower "apple pie"
        in putLine (show (showMaybe showChar) result)
