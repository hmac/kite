module IO

import Data.Function (const)
import Data.Functor (Functor(..))
import Control.Applicative (Applicative(..))
import Data.Monad (Monad(..))
from kite import Kite.Prim (IO(MkIO))

--type IO a = MkIO ((a -> ()) -> ())

-- Combinators

pureIO : a -> IO a
pureIO = x -> MkIO (\k -> k x)

bindIO : IO a -> (a -> IO b) -> IO b
bindIO = (MkIO x) f -> MkIO (\k -> x (\a -> case f a of
                                              MkIO g -> g k))

mapIO : (a -> b) -> IO a -> IO b
mapIO = f m -> bindIO m (\x -> pureIO (f x))

apIO : IO (a -> b) -> IO a -> IO b
apIO = mf mx -> bindIO mf (\f -> bindIO mx (\x -> pureIO (f x)))

-- Typeclass instances

functorIO : Functor IO
functorIO = Functor { map = mapIO }

applicativeIO : Applicative IO
applicativeIO = Applicative { functor = functorIO, pure = pureIO, ap = apIO }

monadIO : Monad IO
monadIO = Monad { applicative = applicativeIO, bind = bindIO }

-- IO functions

getLine : IO String
getLine = MkIO (\k -> k ($fcall getLine))

putLine : String -> IO ()
putLine = s -> MkIO (\k -> k ($fcall putStrLn s))

putStr : String -> IO ()
putStr = s -> MkIO (\k -> k ($fcall putStr s))
