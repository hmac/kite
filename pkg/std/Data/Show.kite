module Data.Show

from kite import Kite.Prim ($showInt)

-- This is the interface for converting types to String, typically for printing.
-- The compiler has built-in show functions for each base type (and eventually
-- we will auto-generate instances for each user-defined type).

type Show a = Show { show : a -> String }

show : Show a -> a -> String
show = (Show d) x -> d.show x

showInt : Show Int
showInt = Show { show = $showInt }

showString : Show String
showString = Show { show = x -> x }

showList : Show a -> Show [a]
showList = (Show d) -> Show { show = xs -> let inner = showListHelper d.show xs in "[#{inner}]" }

showListHelper : (b -> String) -> [b] -> String
showListHelper = _ [] -> ""
                 f [x] -> f x
                 f (x :: xs) -> let s = f x
                                    ss = showListHelper f xs
                                 in "#{s}, #{ss}"
