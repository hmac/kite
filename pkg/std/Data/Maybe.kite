module Data.Maybe

from kite import Kite.Prim (Bool, True, False)
import Data.Functor (Functor(..))
import Data.Eq (Eq, eq)
import Control.Applicative (Applicative, pure, liftA2)
import Control.Monad.State (State, monadState, applicativeState)
import Data.Monad (Monad, bind)
import Data.Function (flip)
import Control.Alternative (Alternative)
import Data.Show (Show(..), show)

type Maybe a = Just a | Nothing

eqMaybe : Eq a -> Eq (Maybe a)
eqMaybe = eqa -> Eq { eq = Nothing Nothing -> True
                           (Just x) (Just y) -> eq eqa x y
                           _        _       -> False
                    }

showMaybe : Show a -> Show (Maybe a)
showMaybe = showa -> Show { show = mx -> maybe "Nothing" (x -> let r = show showa x in "Just #{r}") mx }

mapMaybe : (a -> b) -> Maybe a -> Maybe b
mapMaybe = _ Nothing -> Nothing
           f (Just x) -> Just (f x)

functorMaybe : Functor Maybe
functorMaybe = Functor { map = mapMaybe }

apMaybe : Maybe (a -> b) -> Maybe a -> Maybe b
apMaybe = Nothing _ -> Nothing
          (Just f) m -> mapMaybe f m

applicativeMaybe : Applicative Maybe
applicativeMaybe = Applicative { functor = functorMaybe, pure = Just, ap = apMaybe }

bindMaybe : Maybe a -> (a -> Maybe b) -> Maybe b
bindMaybe = Nothing _  -> Nothing
            (Just x) f -> f x

monadMaybe : Monad Maybe
monadMaybe = Monad { applicative = applicativeMaybe, bind = bindMaybe }

plusMaybe : Maybe a -> Maybe a -> Maybe a
plusMaybe = Nothing r -> r
            l       _ -> l

alternativeMaybe : Alternative Maybe
alternativeMaybe = Alternative { applicative = applicativeMaybe, zero = Nothing, plus = plusMaybe }

maybe : b -> (a -> b) -> Maybe a -> b
maybe = n _ Nothing  -> n
        _ f (Just x) -> f x

isJust : Maybe a -> Bool
isJust = Nothing -> False
         _       -> True

isNothing : Maybe a -> Bool
isNothing = Nothing -> True
            _       -> False

fromMaybe : a -> Maybe a -> a
fromMaybe = d Nothing  -> d
            d (Just x) -> x

catMaybes : [Maybe a] -> [a]
catMaybes = []                 -> []
            ((Just x) :: rest) -> x :: (catMaybes rest)
            (Nothing :: rest)  -> catMaybes rest

---- Haskell calls this mapMaybe, but that's the name of our 'fmap' function
filterMaybe : (a -> Maybe b) -> [a] -> [b]
filterMaybe = _ []        -> []
              f (x :: xs) -> case f x of
                               Just r  -> r :: (filterMaybe f xs)
                               Nothing -> filterMaybe f xs
