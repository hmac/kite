module Data.Bool

import Data.Monoid (Monoid(..))
import Data.Semigroup (Semigroup(..))
import Data.Eq (Eq(..))
import Data.Ord (Ord(..), Ordering(LT, GT, EQ))
import Data.Show (Show(..), show)

not : Bool -> Bool
not =
  False -> True
  True -> False

and : Bool -> Bool -> Bool
and = False _ -> False
      True  b -> b

or : Bool -> Bool -> Bool
or = True  _ -> True
     False b -> b

xor : Bool -> Bool -> Bool
xor = True False -> True
      False True -> True
      _     _    -> False

xnor : Bool -> Bool -> Bool
xnor = x y -> not (xor x y)

all : [Bool] -> Bool
all = []           -> True
      (True :: bs) -> all bs
      (False :: _) -> False

semigroupAll : Semigroup Bool
semigroupAll = Semigroup { append = and }

monoidAll : Monoid Bool
monoidAll = Monoid { empty = True, semigroup = semigroupAll }

semigroupAny : Semigroup Bool
semigroupAny = Semigroup { append = or }

monoidAny : Monoid Bool
monoidAny = Monoid { empty = False, semigroup = semigroupAny }

eqBool : Eq Bool
eqBool = Eq { eq = xnor }

showBool : Show Bool
showBool = Show { show = True -> "True"
                         False -> "False" }

compareBool : Bool -> Bool -> Ordering
compareBool =
  True False -> GT
  False True -> LT
  _     _    -> EQ

ordBool : Ord Bool
ordBool = Ord { eq = eqBool, compare = compareBool }
