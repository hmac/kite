module Data.Tuple

import Data.Eq (Eq(..), eq)
import Data.Bool (and)
import Data.Show (Show(..), show)

eqTuple2 : Eq a => Eq b => () -> Eq (a, b)
eqTuple2 = _ -> Eq { eq = (a1, b1) (a2, b2) -> and (eq a1 a2) (eq b1 b2) }

showTuple2 : Show a -> Show b -> Show (a, b)
showTuple2 = showa showb -> Show { show = (x, y) -> "(#{show showa x}, #{show showb y})" }

fst : (a, b) -> a
fst = (x, _) -> x

snd : (a, b) -> b
snd = (_, y) -> y

first : (a -> b) -> (a, c) -> (b, c)
first = f (x, y) -> (f x, y)

second : (b -> c) -> (a, b) -> (a, c)
second = f (x, y) -> (x, f y)

curry : ((a, b) -> c) -> a -> b -> c
curry = f x y -> f (x, y)

uncurry : (a -> b -> c) -> (a, b) -> c
uncurry = f (x, y) -> f x y
