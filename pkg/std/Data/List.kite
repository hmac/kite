module Data.List
  (head
  , tail
  , last
  , init
  , uncons
  , null
  , length
  , reverse
  , intersperse
  , semigroupList
  , functorList
  , applicativeList
  , monadList
  , subsequences
  , mapMaybe
  , foldl
  , filter
  )

from kite import Kite.Primitive (Bool, True, False)
import Data.Semigroup (Semigroup(..))
import Data.Eq (Eq, eq)
import Data.Maybe (Maybe(..))
import Data.Bool (and, monoidAll)
import Data.Monoid (Monoid(..), concat)
import Kite.List (foldr)
import Data.Functor (Functor(..), map)
import Control.Applicative (Applicative(..), pure, liftA2)
import Data.Monad (Monad(..))
import Data.Show (Show(..), show)
import Kite.String (monoidString)

showList : Show a -> Show [a]
showList =
  showa -> Show { show = xs -> let elems = intersperse ", " (map functorList (show showa) xs)
                                in "[#{concat monoidString elems}]"
                }

listAppend : [a] -> [a] -> [a]
listAppend = [] ys -> ys
             (x :: xs) ys -> x :: (listAppend xs ys)

semigroupList : Semigroup [a]
semigroupList = Semigroup { append = listAppend }

monoidList : Monoid [a]
monoidList = Monoid { empty = [], semigroup = semigroupList }

mapList : (a -> b) -> [a] -> [b]
mapList = _ [] -> []
          f (x :: xs) -> (f x) :: (mapList f xs)

functorList : Functor []
functorList = Functor { map = mapList }

singleton : a -> [a]
singleton = x -> [x]

apList : [a -> b] -> [a] -> [b]
apList = [] xs -> []
         (f :: fs) xs -> listAppend (mapList f xs) (apList fs xs)

applicativeList : Applicative []
applicativeList = Applicative { functor = functorList, pure = singleton, ap = apList }

bindList : [a] -> (a -> [b]) -> [b]
bindList = [] f        -> []
           (x :: xs) f -> listAppend (f x) (bindList xs f)

monadList : Monad []
monadList = Monad { applicative = applicativeList, bind = bindList }

eqList : Eq a -> Eq [a]
eqList = eqa -> Eq { eq = \xs ys -> concat monoidAll (zipWith (eq eqa) xs ys) }

zipWith : (a -> b -> c) -> [a] -> [b] -> [c]
zipWith = _ [] _  -> []
          _ _  [] -> []
          f (x::xs) (y::ys) -> (f x y) :: (zipWith f xs ys)

traverse : forall f a b. Applicative f -> (a -> f b) -> [a] -> f [b]
traverse = appl f []        -> pure appl []
           appl f (x :: xs) -> liftA2 appl (\y ys -> y :: ys) (f x) (traverse appl f xs)

-- Extract the first element of a list.
-- Returns Nothing if the list is empty.
head : [a] -> Maybe a
head = [] -> Nothing
       (x :: _) -> Just x

-- Extract the elements after the head of a list.
-- Returns Nothing if the list is empty.
tail : [a] -> Maybe [a]
tail = [] -> Nothing
       (x :: xs) -> Just xs

-- Extract the last element of a list.
-- Returns Nothing if the list is empty.
last : [a] -> Maybe a
last = [] -> Nothing
       [x] -> Just x
       (x :: xs) -> last xs

-- Return all the elements of a list except the last one.
-- Returns Nothing if the list is empty.
-- TODO: to write this efficiently and nicely, we really need to support
-- pattern matching definitions in let bindings
init : [a] -> Maybe [a]
init = [] -> Nothing
       xs -> Just (go xs)
 where
  go : [a] -> [a]
  go = [x]       -> []
       (x :: xs) -> x :: (go xs)

-- Decompose a list into its head and tail.
-- Returns Nothing if the list is empty.
uncons : [a] -> Maybe (a, [a])
uncons = [] -> Nothing
         (x :: xs) -> Just (x, xs)

-- Returns True is the list is empty
null : [a] -> Bool
null = [] -> True
       _ -> False

-- Returns the length of the list
length : [a] -> Int
length = [] -> 0
         (x :: xs) -> 1 + (length xs)

-- True if all the elements satisfy the predicate
all : (a -> Bool) -> [a] -> Bool
all = p [] -> True
      p (x :: xs) -> and (p x) (all p xs)

-- Return the elements of the list in reverse order.
reverse : [a] -> [a]
reverse = xs -> reverseHelper xs []

-- A helper function for reverse.
-- TODO: inline when we support pattern matching lets
reverseHelper : [a] -> [a] -> [a]
reverseHelper = [] acc -> acc
                (x :: xs) acc -> reverseHelper xs (x :: acc)

-- Intersperse an item between each element of a list
intersperse : a -> [a] -> [a]
intersperse = _ [] -> []
              e (x :: xs) -> x :: (intersperseHelper e xs)

intersperseHelper : a -> [a] -> [a]
intersperseHelper = _ [] -> []
                    e (x :: xs) -> e :: (x :: (intersperseHelper e xs))

subsequences : [a] -> [[a]]
subsequences = xs -> [] :: (nonEmptySubsequences xs)

nonEmptySubsequences : [a] -> [[a]]
nonEmptySubsequences = [] -> []
                       (x :: xs) -> [x] :: (foldr (nonEmptySubsequencesHelper x) [] (nonEmptySubsequences xs))

nonEmptySubsequencesHelper : a -> [a] -> [[a]] -> [[a]]
nonEmptySubsequencesHelper = x ys r -> ys :: ((x :: ys) :: r)

-- Map a Maybe-returning function over a list, keeping the Just values
mapMaybe : (a -> Maybe b) -> [a] -> [b]
mapMaybe = f []        -> []
           f (x :: xs) ->
             case f x of
               Just y -> y :: (mapMaybe f xs)
               Nothing -> mapMaybe f xs

foldlHelper : b -> (b -> a -> b) -> b -> [a] -> b
foldlHelper =
  acc f z []        -> acc
  acc f z (x :: xs) -> foldlHelper (f acc x) f z xs

foldl : (b -> a -> b) -> b -> [a] -> b
foldl = f z xs -> foldlHelper z f z xs

filter : (a -> Bool) -> [a] -> [a]
filter = _ []      -> []
         p (x::xs) -> case p x of
                        True -> x :: (filter p xs)
                        False -> filter p xs
