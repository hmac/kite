module Data.Ord (Ordering, LT, GT, EQ, eqOrdering, Ord, compare, lt, gt, lte, gte)

import Data.Eq (Eq, eq)

type Ordering = LT | GT | EQ

eqOrderingFn : Ordering -> Ordering -> Bool
eqOrderingFn = LT LT -> True
               GT GT -> True
               EQ EQ -> True
               _  _  -> False

eqOrdering : Eq Ordering
eqOrdering = Eq { eq = eqOrderingFn }

type Ord a = Ord { eq : Eq a, compare : a -> a -> Ordering }

ordEq : Ord a -> Eq a
ordEq = (Ord d) -> d.eq

compare : Ord a -> a -> a -> Ordering
compare = (Ord d) -> d.compare

lt : Ord a -> a -> a -> Bool
lt = ord x y -> let eqa = ordEq ord
                 in eq (compare ord x y) LT

gt : Ord a -> a -> a -> Bool
gt = ord x y -> let eqa = ordEq ord in eq (compare ord x y) GT

lte : Ord a -> a -> a -> Bool
lte = ord x y -> let eqa = ordEq ord in not (eq (compare ord x y) GT)

gte : Ord a -> a -> a -> Bool
gte = ord x y -> let eqa = ordEq ord in not (eq (compare ord x y) LT)

-- Data.Bool imports this module, so we can't import Data.Bool.not.
-- Instead we define it again here.
not : Bool -> Bool
not = True -> False
      False -> True
