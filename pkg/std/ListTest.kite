module ListTest

import Test.Assert (assert, assertEq, testMain, TestResult)
import Data.Eq (Eq, eq)
import Data.Int (eqInt, showInt)
import Data.Maybe (Maybe(..), eqMaybe, showMaybe)
import Data.List (head, subsequences, eqList, tail, last, init, uncons, null, showList, length, all)
import Data.Tuple (eqTuple2, showTuple2)
import Data.Bool (not, eqBool, showBool)
import Data.Function (id)
from kite import Kite.Prim (IO)

-- Eq instances that can't currently be inferred
-- These are formed by combining base instance like Eq Int with combinators like
-- Eq Maybe.
-- The typechecker isn't smart enough to know how to combine these itself, yet.

eqMaybeInt : Eq (Maybe Int)
eqMaybeInt = eqMaybe ()

eqListInt : Eq [Int]
eqListInt = eqList ()

eqMaybeListInt : Eq (Maybe [Int])
eqMaybeListInt = eqMaybe ()

eqTuple2IntListInt : Eq (Int, [Int])
eqTuple2IntListInt = eqTuple2 ()

eqMaybeTuple2IntListInt : Eq (Maybe (Int, [Int]))
eqMaybeTuple2IntListInt = eqMaybe ()

main : IO ()
main =
  testMain [
    assertEq  (showMaybe showInt) (head [1]) (Just 1),
    assertEq  (showMaybe showInt) (head []) Nothing,

    assertEq  (showMaybe (showList showInt)) (tail []) Nothing,
    assertEq  (showMaybe (showList showInt)) (tail [1]) (Just []),
    assertEq  (showMaybe (showList showInt)) (tail [1, 2]) (Just [2]),

    assertEq  (showMaybe showInt) (last []) Nothing,
    assertEq  (showMaybe showInt) (last [1]) (Just 1),
    assertEq  (showMaybe showInt) (last [1, 2]) (Just 2),

    assertEq  (showMaybe (showList showInt)) (init []) Nothing,
    assertEq  (showMaybe (showList showInt)) (init [1]) (Just []),
    assertEq  (showMaybe (showList showInt)) (init [1, 2]) (Just [1]),

    assertEq  (showMaybe (showTuple2 showInt (showList showInt))) (uncons []) Nothing,
    assertEq  (showMaybe (showTuple2 showInt (showList showInt))) (uncons [1]) (Just (1, [])),
    assertEq  (showMaybe (showTuple2 showInt (showList showInt))) (uncons [1, 2]) (Just (1, [2])),

    assertEq showBool (null []) True,
    assertEq showBool (null [1]) False,

    assertEq showInt (length []) 0,
    assertEq showInt (length [1]) 1,
    assertEq showInt (length [1,2,3]) 3,

    assertEq showBool (all id []) True,
    assertEq showBool (all id [True]) True,
    assertEq showBool (all id [False]) False,

    assertEq  (showMaybe (showTuple2 showInt (showList showInt))) (Just (1, [])) (Just (1, [])),
    assertEq  (showMaybe (showTuple2 showInt (showList showInt))) (uncons [1]) (Just (1, [])),
    assertEq  (showMaybe (showTuple2 showInt (showList showInt))) (uncons [1, 2]) (Just (1, [2]))
  ]
