module Control.Alternative

import Data.Functor (Functor, map)
import Control.Applicative (Applicative, liftA2, pure)
import Lazy (Lazy, force)

type Alternative f = Alternative { applicative : Applicative f, zero : forall a. f a, plus : forall a. f a -> f a -> f a }

zero : Alternative f -> f a
zero = (Alternative d) -> d.zero

plus : Alternative f -> f a -> f a -> f a
plus = (Alternative d) -> d.plus

applicative : Alternative f -> Applicative f
applicative = (Alternative d) -> d.applicative

functor : Alternative f -> Functor f
functor = f -> case applicative f of
                 (Applicative g) -> g.functor

some : Alternative f -> Lazy (f [a]) -> f a -> f [a]
some = alt lazy v -> liftA2 (applicative alt) (x xs -> x :: xs) v (force lazy (_ -> many alt lazy v))

many : Alternative f -> Lazy (f [a]) -> f a -> f [a]
many = alt lazy v -> plus alt (some alt lazy v) (pure (applicative alt) [])
